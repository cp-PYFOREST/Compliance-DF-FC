---
title: "Compliance Visualizations"
format: html
editor: visual
---

```{r}
# Load packages
library(sf)
library(tidyverse)
library(terra) 
library(tmap)
library(leaflet)
library(leaflet.extras)
library(ggplot2)
library(exactextractr)
library(units)
library(tictoc)
library(grDevices)
library(plotly)
library(forcats)
library(RColorBrewer)
library(htmltools) #don't think I am using
library(maps)
library(maptools)
library(sp)
library(ggiraph)
library(ggiraphExtra)
```

# Read in processed data

```{r}
illegal_df_by_dist <- read_rds("~/../../capstone/pyforest/lup_assessment_data/compliance_results/illegal_df_by_dist.rds")


# illegal_df_by_dist <- read_rds("~/../../capstone/pyforest/lup_assessment_data/compliance_results/illegal_df_by_dist.rds")
# illegal_df_by_dpto <- read_rds("~/../../capstone/pyforest/lup_assessment_data/compliance_results/illegal_df_by_dpto.rds")
# illegal_df <- read_rds("~/../../capstone/pyforest/lup_assessment_data/compliance_results/illegal_df.rds")
# authorized_df_by_dist <- read_rds("~/../../capstone/pyforest/lup_assessment_data/compliance_results/authorized_df_by_dist.rds")
```

# Visualizations

## PYFOREST Palette

```{r}
pyforest_palette <- c("#4B5F43", "#AEBD93", "#2F4858", "#33658A", "#A7C7D8", "#F6AE2D", "#F26419") 
#"#2F4858", "#33658A",
#F8F7F1
```

## Authorized Area

```{r}
# Remove NAs from authorized_df_by_dist
#authorized_df_by_dist <- na.omit(authorized_df_by_dist)
# Transform the data to lat-long
authorized_df_by_dist <- st_transform(authorized_df_by_dist, crs = "+proj=longlat +datum=WGS84")

# Create a color palette
#my_palette2 <- colorNumeric(palette = "YlGnBu", domain = authorized_df_by_dist$sum_remaining_df_area_ha, n = 4)
py_palette <- colorNumeric(palette = pyforest_palette, domain = authorized_df_by_dist$sum_remaining_df_area_ha, n = length(pyforest_palette))


# Create the leaflet map
leaflet(data = authorized_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~py_palette(sum_remaining_df_area_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", authorized_df_by_dist$nom_dist,
                             " Remaining area authorized to be deforested: ", round(authorized_df_by_dist$sum_remaining_df_area_ha), " ha",
                             " Area authorized to be deforested: ", round(authorized_df_by_dist$sum_lut_area_ha), " ha")) %>%
  addLegend(pal = py_palette, values = authorized_df_by_dist$sum_remaining_df_area_ha,
            title = "Remaining area authorized to be deforested (ha)",
            position = "bottomright")
```

```{r}
# Create a horizontal bar chart
ggplot(authorized_df_by_dist, aes(x = sum_remaining_df_area_ha, y = reorder(nom_dist, num_put_id), fill = sum_remaining_df_area_ha)) +
  geom_bar(stat = "identity") +
  scale_fill_gradientn(colors = pyforest_palette)) +
  ggtitle("Remaining area authorized to be deforested") +
  xlab("Remaining area authorized to be deforested (ha)") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  labs(fill = "Remaining area authorized to be deforested (ha)")
```

```{r}
# static
ggplot(authorized_df_by_dist, aes(y = nom_dist, x = sum_lut_area_ha)) +
  geom_col(aes(fill = "Remaining", x = sum_remaining_df_area_ha)) +
  geom_col(aes(fill = "Deforested", x = sum_df_ha), position = "stack") +
  scale_fill_manual(values = c("Remaining" = "#2ca25f", "Deforested" = "#99d8c9"),
                    guide = guide_legend(title = NULL)) +
  ggtitle("Authorized Deforestation in each district") +
  xlab("Area (ha)") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right")

# interactive
# Remove NAs from authorized_df_by_dist
authorized_df_by_dist <- na.omit(authorized_df_by_dist)
p <- ggplot(authorized_df_by_dist, aes(y = nom_dist, x = sum_lut_area_ha)) +
  geom_col(aes(fill = "Remaining", x = sum_remaining_df_area_ha)) +
  geom_col(aes(fill = "Deforested", x = sum_df_ha), position = "stack") +
  scale_fill_manual(values = c("Remaining" = "#2ca25f", "Deforested" = "#99d8c9"),
                    guide = guide_legend(title = NULL)) +
  ggtitle("Authorized Deforestation in each district") +
  xlab("Area (ha)") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  scale_x_continuous(labels = scales::comma,breaks = seq(0, max(authorized_df_by_dist$sum_lut_area_ha), 100000))


ggplotly(p, tooltip = c("sum_remaining_df_area_ha", "sum_df_ha", "sum_lut_area_ha"))
```

## Bosques

```{r}
# Define color palette
#my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df$sum_df_ha_dist, n = length(pyforest_palette))

```

```{r}
# choropleth leaflet map
# Transform the data to lat-long
illegal_df_by_dist <- st_transform(illegal_df_by_dist, crs = "+proj=longlat +datum=WGS84")

# Define the color palette
pyforest_palette <- c("#4B5F43", "#AEBD93", "#F6AE2D", "#F26419")

# Define color palette
my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df_by_dist$sum_df_ha, n =4)
#my_palette <- colorNumeric(palette = pyforest_palette, domain = domain, n = 4)


# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright")
```

```{r}
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)

# Define the color palette
pyforest_palette <- c("#4B5F43", "#AEBD93", "#F6AE2D", "#F26419")

# Define the domain for color scaling
domain <- illegal_df_by_dist$sum_df_ha

# Define the desired breaks for the legend
breaks <- c(0, 5000, 10000, 15000, 20000)  # Adjust the break values as per your requirement

# Define the desired labels for the legend
labels <- c("20,000", "15,000", "10,000", "5,000", "0")  # Adjust the labels as desired

# Create the colorNumeric object with manual labels and colors
my_palette <- colorNumeric(palette = pyforest_palette, domain = domain)

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright",
            labels = labels,
            opacity = 0.8)

```

```{r}
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)

# Define the reversed color palette
pyforest_palette <- rev(c("#F26419", "#F6AE2D", "#AEBD93", "#4B5F43"))


#"#A7C7D8", "#33658A", "#2F4858"

# Define the domain for color scaling
domain <- illegal_df_by_dist$sum_df_ha

# Create the colorNumeric object using pyforest_palette and reversed domain
my_palette <- colorNumeric(palette = pyforest_palette, domain = domain)

rev_labels <- function(values) {
  labels <- max(values) - values
  return(labels)
}

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(domain),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(position = "bottomright",
            pal = my_palette,
            values = domain,
            title = "Illegal Deforestation (hectares)",
            labFormat = labelFormat(transform = rev_labels))

```

```{r}
library(leaflet)
library(htmltools)

# Define the color palette
pyforest_palette <- c("#4B5F43", "#AEBD93", "#F6AE2D", "#F26419") 

# Define the domain for color scaling
domain <- illegal_df_by_dist$sum_df_ha
# Replace non-finite numbers with NA
domain[!is.finite(domain)] <- NA


# Create the colorNumeric object using pyforest_palette and domain
my_palette <- colorNumeric(palette = pyforest_palette, domain = domain)
# 
# Create a vector of breaks for the legend
breaks <- pretty(domain, n = 6)

# Exclude the maximum value (NA value) from breaks
breaks <- breaks[breaks != max(breaks, na.rm = TRUE)]


# # Define the number of breaks
# n_breaks <- 6
# 
# # Calculate the step size for the breaks, excluding NA values
# step_size <- (max(domain, na.rm = TRUE) - min(domain, na.rm = TRUE)) / (n_breaks - 1)
# 
# # Create the breaks
# breaks <- seq(min(domain, na.rm = TRUE), max(domain, na.rm = TRUE), by = step_size)


# Create a corresponding vector of colors for the legend
colors <- my_palette(breaks)

# Reverse the breaks and colors for the legend
breaks_rev <- rev(breaks)
colors_rev <- rev(colors)

# Create an HTML legend
legend_html <- paste0(
  '<div style="padding: 10px; background-color: rgba(255,255,255,0.8);">',
  '<h4>Illegal Deforestation (hectares)</h4>',
  paste0(
    '<div style="display: flex; align-items: center;">',
    '<div style="background-color: ', colors_rev, '; width: 20px; height: 20px; margin-right: 5px;"></div>',
    '<div>', breaks_rev, '</div>',
    '</div>',
    collapse = ''
  ),
  '<div style="display: flex; align-items: center;">',
  '<div style="background-color: gray; width: 20px; height: 20px; margin-right: 5px;"></div>',
  '<div>NA</div>',
  '</div>',
  '</div>'
)

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(domain),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addControl(html = legend_html, position = "bottomright")

```

```{r}
# choropleth leaflet map
# Transform the data to lat-long
illegal_df_by_dist <- st_transform(illegal_df_by_dist, crs = "+proj=longlat +datum=WGS84")

# Define color palette
my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df_by_dist$sum_df_ha)

rev_labels <- function(values) {
  max_val <- max(values)
  labels <- round(max_val - values)
  return(labels)
}

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright",
            labFormat = labelFormat(transform = rev_labels))


# # Illegal Deforestation Percent
# my_palette1 <- colorNumeric(palette = "YlGnBu", domain = c(min(na.omit(illegal_df_by_dist$df_percent)), max(na.omit(illegal_df_by_dist$df_percent))))
# 
# leaflet(data = illegal_df_by_dist) %>%
#   addProviderTiles(providers$CartoDB.Positron) %>%
#   addPolygons(fillColor = ~my_palette1(df_percent),
#               fillOpacity = 0.8,
#               color = "#BDBDC3",
#               weight = 1,
#               opacity = 1,
#               highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
#               label = paste0("District: ", illegal_df_by_dist$nom_dist,
#                              " Illegal Deforestation: ", round(illegal_df_by_dist$df_percent), "%",
#                              " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
#   addLegend(pal = my_palette1, values = illegal_df_by_dist$df_percent,
#             title = "Illegal Deforestation Percent",
#             position = "bottomright")
```

```{r}
# Define color palette
my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df_by_dist$sum_df_ha)

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright")

```

```{r}
# Define color palette
my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df_by_dist$sum_df_ha)

# Create a vector of breaks for the legend
breaks <- pretty(illegal_df_by_dist$sum_df_ha, n = 10)

# Create a corresponding vector of colors for the legend
colors <- my_palette(breaks)

# Reverse the breaks and colors for the legend
breaks_rev <- rev(breaks)
colors_rev <- rev(colors)

# Create a data frame for the legend
legend_df <- data.frame(Break = breaks_rev, Color = colors_rev)

# Print the legend data frame
print(legend_df)

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright")

```

```{r}
# Define color palette for the map
my_palette <- colorNumeric(palette = pyforest_palette, domain = illegal_df_by_dist$sum_df_ha)

# Define reversed color palette for the legend
my_palette_rev <- colorNumeric(palette = rev(pyforest_palette), domain = illegal_df_by_dist$sum_df_ha)

# Create leaflet map
leaflet(data = illegal_df_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(sum_df_ha),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", illegal_df_by_dist$nom_dist,
                             " Illegal Deforestation: ", round(illegal_df_by_dist$sum_df_ha),
                             " Number of properties: ", illegal_df_by_dist$num_put_id)) %>%
  addLegend(pal = my_palette_rev, values = illegal_df_by_dist$sum_df_ha,
            title = "Illegal Deforestation (hectares)",
            position = "bottomright")

```

```{r}
# Create a horizontal bar chart
ggplot(illegal_df_by_dist, aes(x = sum_df_ha, y = reorder(nom_dist, num_put_id), fill = sum_df_ha)) +
  geom_bar(stat = "identity") +
  scale_fill_gradientn(colors = pyforest_palette) +
  geom_text(aes(label = paste("Property Count:", num_put_id)), hjust = -0.1, size = 3) +
  ggtitle("Illegal Deforestation by District") +
  xlab("Illegal Deforestation (hectares)") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  labs(fill = "Illegal Deforestation by District")
```

```{r}
#interactive
library(plotly)

p1 <- ggplot(illegal_by_dist, aes(x = avg_compliance, y = nom_dist, fill = avg_compliance)) +
  geom_bar(stat = "identity") +
  scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd")) +
  ggtitle("Average Compliance and Property Count by District") +
  xlab("Average Compliance Percentage") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  labs(fill = "Average Compliance Percentage")

# Create interactive plotly object

ggplotly(p1, tooltip = c("x")) %>%
  style(hoverlabel = list(bgcolor = "white"))
```

# combined illegal df

```{r}
library(ggplot2)
library(ggridges)

combined_illegal_df_by_dist %>%
  ggplot(aes(x = nom_dist, y = sum_df_ha, fill = year_range)) +
  geom_col(position = "dodge") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(x = "District", y = "Deforested Area (ha)", fill = "Year Range",
       title = "Comparison of Deforested Area between Years 11-20")

combined_illegal_df_by_dist %>%
  ggplot(aes(x = sum_df_ha, y = nom_dist)) +
  geom_density_ridges(scale = 3, alpha = 0.7, color = "blue") +
  theme_ridges() +
  labs(x = "Deforested Area (ha)",
       y = "District",
       fill = "Year Range",
       title = "Comparison of Deforested Area between Years 11-20",
       subtitle = "Illegal Deforestation Data") +
  theme(plot.title = element_text(face = "bold", size = 16, margin = margin(b = 10)),
        plot.subtitle = element_text(size = 12, margin = margin(b = 20)),
        axis.title = element_text(face = "bold", size = 12),
        legend.title = element_text(face = "bold", size = 10),
        legend.text = element_text(size = 8),
        legend.position = "bottom",
        legend.box.margin = margin(t = 5))

combined_illegal_df_by_dist %>%
  ggplot(aes(x = nom_dist, y = sum_df_ha, fill = year_range)) +
  geom_bar(position = "dodge", stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(x = "District",
       y = "Deforested Area (ha)",
       fill = "Year Range",
       title = "Comparison of Deforested Area between Years 11-20") +
  theme(plot.title = element_text(face = "bold", size = 16, margin = margin(b = 10)),
        axis.title = element_text(face = "bold", size = 12),
        legend.title = element_text(face = "bold", size = 10),
        legend.text = element_text(size = 8),
        legend.position = "bottom",
        legend.box.margin = margin(t = 5))
```

```{r}
combined_illegal_df_by_dpto %>%
  ggplot(aes(x = nom_dpto, y = sum_df_ha, fill = year_range)) +
  geom_col(position = "dodge") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(x = "Department", y = "Deforested Area (ha)", fill = "Year Range",
       title = "Comparison of Deforested Area between Years 11-20")
```

```{r}
 combined_auth_df_by_dpto %>%
  ggplot(aes(x = nom_dpto, y = sum_df_ha, fill = year_range)) +
  geom_col(position = "dodge") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(x = "Department", y = "Deforested Area (ha)", fill = "Year Range",
       title = "Comparison of Deforested Area between Years 11-20")
```




```{r}
# Convert year_range to factor or character
combined_illegal_df_by_dist$year_range <- factor(combined_illegal_df_by_dist$year_range, levels = rev(unique(combined_illegal_df_by_dist$year_range)))

# Plot the data with reversed x-axis labels and values
ggplot(combined_illegal_df_by_dist, aes(x = year_range, y = sum_df_ha, group = 1)) +
  geom_area(fill = "#33658A", alpha = 0.3) +
  geom_point(color = "#33658A", size = 1) +
  scale_x_discrete(limits = rev(levels(combined_illegal_df_by_dist$year_range)), labels = rev(levels(combined_illegal_df_by_dist$year_range))) +
  labs(title = "Change in Illegal Deforestation (ha) Over Time",
       x = "Time Frame", y = "Illegal Deforestation (ha)") +
  facet_wrap(~ nom_dist, ncol = 2, scales = "free") +
  theme_minimal()
```

