```{r}
# Load packages ---------------------------------------------------------
library(sf)
library(tidyverse)
library(terra) 
library(tmap)
library(leaflet)
library(ggplot2)
library(exactextractr)
library(units)
library(tictoc)
```


# DATA
```{r}
#tic()
```

```{r}
# Data directory ---------------------------------------------------------
datadir <- path.expand("~/../../capstone/pyforest/data")
```

## INFONA FOREST LOSS RASTERS
```{r}
# Forest loss --------------------------------------------------------
fl_00_05 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20002005.tif"))


```



```{r}
# fl_05_11 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20052011.tif"))
# 
# fl_11_13 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20112013.tif"))
# 
# fl_13_15 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20132015.tif"))
# 
# fl_15_17 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20152017.tif"))
# 
# fl_17_18 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20172018.tif"))
# 
# fl_18_19 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20182019.tif"))
# 
# fl_19_20 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20192020.tif"))
```


##  Source  in  function for active lup_period

```{r}
#
source("lup_data.R")


```



```{r}
# Read in LUP data 
datadir <- path.expand("~/../../capstone/pyforest/data")
lup <- readRDS(file.path(datadir, "active_inactive/active_inactive.rds"))
#unique(lup$cod_dpto) #(P,Q,R departments of Chaco)
```


```{r}
# Apply function to get active LUP for year ranges 
lup_year <- lup_period(2000, 2005, lup)
# lup_year <- lup_period(2005, 2011, lup)
# lup_year <- lup_period(2011, 2013, lup)
# lup_year <- lup_period(2013, 2016, lup)
# lup_year <- lup_period(2015, 2017, lup)
# lup_year <- lup_period(2017, 2018, lup)
# lup_year <- lup_period(2018, 2019, lup)
# lup_year <- lup_period(2019, 2020, lup)
```

```{r}


# LUP w/forest reserve/hedgerows/paddocks polygons ----------------------------------
# data is still not cleaned up with matching put_id (*v_2)
# lup_w_categories <- sf::st_read(file.path(datadir, "permited_land_use/catastro_forestal.shp"))
lup_w_categories <- st_read(file.path(datadir, "permited_land_use/in_progress_v2_permited_lup_data/uso_alternativo_v2.gpkg"))
```

# Check CRS

```{r}
# st_crs(fl_00_05) 
#Coordinate Reference System:
#   User input: WGS 84 / UTM zone 21S 
#   wkt:
# PROJCRS["WGS 84 / UTM zone 21S"
# 
# 
# st_crs(lup_year)
# Coordinate Reference System:
#   User input: WGS 84 / UTM zone 21S 
#   wkt:
# PROJCRS["WGS 84 / UTM zone 21S"
# 
# 
# st_crs(lup_w_categories)
# Coordinate Reference System:
#   User input: WGS 84 
#   wkt:
# GEOGCRS["WGS 84
```


```{r}
lup_w_categories_proj <- st_transform(lup_w_categories, crs(fl_00_05))
# st_crs(lup_w_categories_proj)
# Coordinate Reference System:
#   User input: PROJCRS["WGS 84 / UTM zone 21S",
#     BASEGEOGCRS["WGS 84"
```



### Subset of LUP

```{r}
# Data 
# fl_00_05
#lup_2000_2005

# Filter the permitted_lup data with the active properties for the year range
lup_active_year <- lup_w_categories_proj %>% 
  filter(put_id %in% lup_year$put_id)

# st_crs(lup_active_00_05)
# Coordinate Reference System:
#   User input: PROJCRS["WGS 84 / UTM zone 21S",
#     BASEGEOGCRS["WGS 84"
```


```{r}
ext(fl_00_05)
st_bbox(lup_active_year)
```

```{r}
ext(fl_00_05) <- ext(lup_active_year) 
```

# EXTRACT CELL COUNTS
```{r}
auth_year <- as.data.frame(terra::extract(fl_00_05, lup_active_year, fun=sum, na.rm=TRUE, ID=TRUE, bind = TRUE))


```

```{r}
auth_year_touches <- terra::extract(fl_00_05, lup_active_year, fun=sum, na.rm=TRUE, ID=TRUE, touches = TRUE, bind = TRUE)
```

# AREA STATISTICS

```{r}
# Compute the area covered by individual raster cells.
# area_cell <-  terra::cellSize(fl_00_05, unit  = 'm')
#  area_cell
# name        :     area 
# min value   : 761.8847 
# (761.8847 + 767.4869  )/2
# [1] 764.6858
# max value   : 767.4869 
#  it computes the spherical area of a cell (as defined by its four corners). This matters most at high latitudes, where the width of a cell changes most, and can be different between the bottom and the top of a cell. So the difference will be largest at high latitudes and with cells with a low vertical resolution.
```
## USING GROUPS
```{r}
lup_active_year$group_area <- st_area(lup_active_year)

lup_active_year_grouped <- lup_active_year %>%
  group_by(put_id, grupo) %>%
  summarize(authorized_area = sum(group_area)) 

group_areas <- lup_active_year_grouped |> 
  select(authorized_area) |>
  st_drop_geometry() |>
  drop_units()
```


```{r}
# NEED TO DECIDE WHICH MEASURE OF CELL AREA TO USE, HAVE TO CONSIDER 
# HOW EACH ONE WILL IMPACT THE DIFFERENCE CALCULATION, LOOK AT 30X30
#  FOR EASIEST TO UNDERSTAND
auth_year_group <- auth_year |>
  group_by(put_id, grupo) |>
  summarize(cell_count = sum(periodo_ca)) |>
  mutate(area_30x30 = cell_count * 30^2,
         area_ha = area_30x30/ 10000,
         area_cellsize_min = cell_count * 761.8847,
         area_cellsize_mean = cell_count * 764.6858,
         area_cellsize_max = cell_count * 767.4869) |>
  bind_cols(group_areas) 

auth_year_group <- auth_year_group |> 
  mutate(diff_area = authorized_area - area_cellsize_mean, #USING MEAN 
         compliance = if_else((authorized_area - diff_area) > 0, 0, 1)) 
# 0 = Compliance
# 1 = UNAUTHORIZED DEFORESTATION
#
```
## USING TOUCH

```{r}
# 
auth_year_group2 <- as.data.frame(auth_year_touches) |>
  group_by(put_id, grupo) |>
  summarize(cell_count = sum(periodo_ca)) |>
  mutate(area_30x30 = cell_count * 30^2, # NEED TO DECIDE WHICH AREA TO USE 
         area_ha = area_30x30/ 10000,
         area_cellsize_min = cell_count * 761.8847,   
         area_cellsize_mean = cell_count * 764.6858,
         area_cellsize_max = cell_count * 767.4869 ) |>
   bind_cols(group_areas)


auth_year_group2 <- auth_year_group2 |> 
  mutate(diff_area = authorized_area - area_cellsize_mean, #USING MEAN 
         compliance = if_else((authorized_area - diff_area) > 0, 0, 1)) 

# 0 = Compliance
# 1 = UNAUTHORIZED DEFORESTATION
#
```


# USING CATEGORIES INSTEAD OF GROUPS

```{r}
lup_active_year_category <- lup_active_year %>%
  group_by(put_id, categoria) %>%
  summarize(authorized_area = sum(group_area)) 

category_areas <- lup_active_year_category |> 
  select(authorized_area) |>
  st_drop_geometry() |>
  drop_units()
```


```{r}
auth_year_categoria <- auth_year |>
  group_by(put_id, categoria) |>
  summarize(cell_count = sum(periodo_ca)) |>
  mutate(area_30x30 = cell_count * 30^2,
         area_ha = area_30x30/ 10000,
         area_cellsize_min = cell_count * 761.8847,
         area_cellsize_mean = cell_count * 764.6858,
         area_cellsize_max = cell_count * 767.4869 ) |>
   bind_cols(category_areas)

auth_year_categoria <-auth_year_categoria |> 
  mutate(diff_area = authorized_area - area_cellsize_mean, #USING MEAN 
         compliance = if_else((authorized_area - diff_area) > 0, 0, 1))
# 0 = Compliance
# 1 = UNAUTHORIZED DEFORESTATION
#
```


```{r}

auth_year_categoria2 <- as.data.frame(auth_year_touches) |>
  group_by(put_id, categoria) |>
  summarize(cell_count = sum(periodo_ca)) |>
  mutate(area_30x30 = cell_count * 30^2,
         area_ha = area_30x30/ 10000,
         area_cellsize_min = cell_count * 761.8847,
         area_cellsize_mean = cell_count * 764.6858,
         area_cellsize_max = cell_count * 767.4869 )|>
   bind_cols(category_areas)

auth_year_categoria2 <-auth_year_categoria2 |> 
  mutate(diff_area = authorized_area - area_cellsize_mean, #USING MEAN 
         compliance = if_else((authorized_area - diff_area) > 0, 0, 1)) 
# 0 = Compliance
# 1 = UNAUTHORIZED DEFORESTATION
#
```
```{r}
# WON'T NEED TO SAVE AS MANY AFTER DECIDING WHICH APPROACH TO TAKE
# 
# 

# write_rds(auth_year_group, "/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_group.rds")

# write_rds(auth_year_group2, "/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_group2.rds")
# 
# write_rds(auth_year_categoria, "/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_categoria.rds")
# 
# write_rds(auth_year_categoria2, "/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_categoria2.rds")
# 
# 
# 

auth_yr_grp <- read_rds("/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_group.rds")

auth_yr_grp2 <- read_rds("/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_group2.rds")

auth_yr_cat <- read_rds("/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_categoria.rds")

auth_yr_cat2 <- read_rds("/Users/romero61/../../capstone/pyforest/lup_compliance_results/auth_year_categoria2.rds")


```


```{r}
#toc() # 418.188 sec elapsed will be reduced when only using one extract and if we only use touches
```



