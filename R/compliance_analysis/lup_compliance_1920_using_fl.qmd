#19-20

```{r}
# Load packages ---------------------------------------------------------
library(sf)
library(tidyverse)
library(terra) 
library(tmap)
library(leaflet)
library(ggplot2)
library(exactextractr)
library(units)
library(tictoc)
library(grDevices)
library(plotly)
library(forcats)
library(RColorBrewer)
library(htmltools) #don't think I am using
library(maps)
library(maptools)
library(sp)
library(ggiraph)
library(ggiraphExtra)

```

# DATA

```{r}
# Data directory ---------------------------------------------------------
datadir <- path.expand("~/../../capstone/pyforest/data")
```

## Political Boundaries

```{r}
# read in department shapefile
department <- st_read(file.path(datadir, "political_boundaries/departamento.shp"))
# filter to only the departments within the Chaco region
chaco_dpto <- filter(department, nom_dpto %in% c("ALTO PARAGUAY", "PDTE. HAYES", "BOQUERON"))

# read in district shapefile
district <- st_read(file.path(datadir, "political_boundaries/distritos.shp")) |>
  rename(dpto = cod_dpto)
# # Filter the district data frame to only include districts within the Chaco region departments
# chaco_district <- district %>%
#   filter(dpto %in% chaco_dpto$dpto)

# create a named vector of department names
dept_names <- c("PDTE. HAYES", "BOQUERON", "ALTO PARAGUAY")
names(dept_names) <- c("P", "Q", "R") 

# add a new column with the full department names based on the dpto column
political_boundaries <- district %>%
  mutate(nom_dpto = dept_names[dpto]) %>%
  filter(dpto %in% c("P", "Q", "R"))
```

## INFONA Forest Loss Rasters

```{r}
# Forest loss --------------------------------------------------------
fl_19_20 <- terra::rast(file.path(datadir, "fl_infona/fl20192020.tif"))

```

## Property Limit and Land Use

```{r}
# Read in active and inactive land use data 
datadir <- path.expand("~/../../capstone/pyforest/data")
#limit <- readRDS(file.path(datadir, "active_inactive/active_inactive.rds")) #not the raw limit data - this is a filtered version 

# Load "limit_period()" function from an external file
active_limit <- st_read("~/../../capstone/pyforest/lup_compliance_data/active_inactive/active_inactive1920.gpkg")
```

```{r}
# Read in land use plan (lup) data w/ land use type (grupos) and reserve/hedgerows/paddocks (categorias) polygons ----------------------------------
lup <- st_read(file.path(datadir, "permited_land_use/lup_gpkg/lup.gpkg"), layer = "lup_cadaster")
```

# PREPARE SPATIAL DATA

```{r}
#Check CRS
st_crs(fl_19_20)
st_crs(old)
st_crs(active_limit)
st_crs(lup)
```

```{r}
#transform the CRS of lup to the the forest loss raster (fl_19_20)
lup_proj <- st_transform(lup, crs(fl_19_20))
```

### Subset of LUP

```{r}
# Filter the permitted lup data with the active properties for the year range
lup_active_year <- lup_proj %>% 
  filter(put_id %in% active_limit$put_id)
```

```{r}
# Check the extent of forest loss raster and filtered lup data
ext(fl_19_20)
st_bbox(lup_active_year)
```

```{r}
# Update the extent of the forest loss raster to match the extent of the filtered lup data
ext(fl_19_20) <- ext(lup_active_year) 
```

# EXTRACT CELL COUNTS

```{r}
tic()
auth_year_touches <- terra::extract(fl_19_20, lup_active_year, fun=sum, na.rm=TRUE, ID=TRUE, touches = TRUE, bind = TRUE)
toc()
```

## Calculate area of land use types (grupos)

```{r}
tic()
# Use st_area to calculate the area of each polygon feature and create a new column called "approved_lup_area" 
lup_active_year$approved_lup_area <- st_area(lup_active_year)

# Make the geometry of the features valid
lup_active_year_valid <- st_make_valid(lup_active_year)

#lup_active_year_valid_test <- st_make_valid(lup_active_year_test)

# Group the features and summarize the data
lup_active_year_grouped <- lup_active_year_valid %>%
  group_by(put_id, grupo) %>%
  summarize(land_use_type_area = sum(approved_lup_area)) #land_use_type = grupos(bosques, authorized, etc.)

# Isolate the calculated authorized area for each LUP
temp <- lup_active_year_grouped |> 
  select(land_use_type_area) |>
  mutate(land_use_type_area_ha = land_use_type_area / 10000) |>
  st_drop_geometry() |>
  drop_units()

toc()
```

## USING TOUCH

```{r}
auth_year_group <- as.data.frame(auth_year_touches) |>
  group_by(put_id, grupo) |>
  summarize(cell_count = sum(cf_rast_20)) |>
  mutate(fc_area_ha = cell_count * 30^2/ 10000) |>
   bind_cols(temp) 
```

```{r}
#Save df for easier access
write_rds(auth_year_group, "/Users/acreed/../../capstone/pyforest/lup_compliance_data/results/auth_year_group_1920.rds")

auth_year_group <- read_rds("/Users/acreed/../../capstone/pyforest/lup_compliance_results/auth_year_group_1920.rds")
```

# Compliance Statistics

#Bosques

```{r}
# auth_year_bosques <- auth_year_group %>%
#   filter(grepl("bosques", grupo, ignore.case = TRUE)) %>%
#   mutate(
#     actual_lut_area = land_use_type_area - df_area_ha,
#     compliance = if_else(df_area_ha > 2 & (land_use_type_area - actual_lut_area) > 0, 0, 1)) 

auth_year_bosques <- auth_year_group %>%
  filter(grepl("bosques", grupo, ignore.case = TRUE)) %>%
  mutate(df_area_ha = land_use_type_area_ha - fc_area_ha,
    compliance = if_else(df_area_ha > 2 & (land_use_type_area_ha - fc_area_ha) > 0, 0, 1)) 

# df_area_ha > 2 hectares. 2 hectare tolerance based on INFONA minimum fine 
# 1 = Compliance (authorized deforestation)
# 0 = Non-Compliance (unauthorized deforestation)

# Calculate the number of compliant and non-compliant properties
noncompliant_properties <- auth_year_bosques %>%
  filter(compliance == 0)

compliant_properties <- auth_year_bosques %>%
  filter(compliance == 1)

total_properties <- nrow(auth_year_bosques)
total_compliant <- nrow(compliant_properties)
total_noncompliant <- nrow(noncompliant_properties)

# Calculate the percent compliance
compliance_perc <- (total_compliant / total_properties) * 100
noncompliance_perc <- (total_noncompliant / total_properties) * 100
```

#Authorized Area

```{r}

#STILL WORKING ON

# Determining if properties have cut less than what was authorized to be cut 
#area_authorized = area authorized to be deforested 

auth_year_area_authorized <- auth_year_group %>%
  filter(grepl("AREA_AUTORIZADA", grupo, ignore.case = TRUE)) %>%
  mutate(actual_lut_area = land_use_type_area - df_area_ha,
         
         
         
         new = if_else(actual_lut_area == 0, "Deforested what was authorized",
               if_else(actual_lut_area > 0, "Not fully deforested yet",
                       "Deforested more than authorized"))) %>%
  dplyr::select(-geom)

         
         
         
             new = if_else(land_use_type_area - actual_lut_area) > 0, "not fully deforested", "authorized deforested"))  %>%
  dplyr::select(-geom)
         
         
         
  #        new = if_else(actual_lut_area >= land_use_type_area, "Not deforested yet",
  #                      if_else(actual_lut_area < land_use_type_area, "Deforested more than authorized", NA_character_))) %>%
  # dplyr::select(-geom)



#         new = if_else(df_area_ha > 0.5 & actual_lut_area == land_use_type_area, "Deforested as authorized",
#                        if_else(df_area_ha > 1 & actual_lut_area < land_use_type_area, "Deforested more than authorized",
#                                "Not fully deforested")))


auth_year_area_authorized <- auth_year_group_test %>%
  filter(grepl("AREA_AUTORIZADA", grupo, ignore.case = TRUE)) %>%
  mutate(actual_lut_area = land_use_type_area - df_area_ha) 
  #%>%
  # dplyr::select(-geom)
         
new_col <- if_else(actual_lut_area == land_use_type_area, "Deforested as authorized",
                   if_else(actual_lut_area < land_use_type_area, "Deforested more than authorized",
                           "Not fully deforested"))

         
         
         not_deforested = if_else((land_use_type_area - actual_lut_area) > 0, 0, 1)) 
#did not deforest as much as they said they would

# 1 = cut what they said they would cut
# 0 = have more forest

# Bosques Compliance:
# 14% compliance (249 properties)
# 85% noncompliance (1551 properties)

```

```{r}
lup_active_year_grouped <- lup_active_year_grouped %>% 
  distinct(put_id, .keep_all = TRUE) %>% 
  group_by(put_id) %>% 
  summarise(geom = st_combine(st_make_valid(geom))) %>% 
  ungroup()

auth_year_bosques_geom <- auth_year_bosques %>% 
  left_join(lup_active_year_grouped %>% 
              select(put_id, geom), 
            by = "put_id") %>% 
  st_set_geometry("geom")

st_crs(auth_year_bosques_geom)
st_crs(political_boundaries)
```

## Average compliance by Political Boundaries District

```{r}
#better for shiny?
# Join the two datasets by spatial intersection
pb_bosques_compliance <- st_join(political_boundaries, auth_year_bosques_geom, join = st_intersects)

# Create a new column to indicate whether the record is a district or department
pb_bosques_compliance$type <- ifelse(!is.na(pb_bosques_compliance$nom_dist), "District", "Department")

# Calculate the average compliance by district and department and determine how many put_id per district and department
compliance_by_loc <- pb_bosques_compliance %>%
  group_by(type, nom_dpto, nom_dist) %>%
  summarize(avg_compliance = mean(compliance) * 100, 
            num_put_id = n_distinct(put_id),
            num_non_compliant = sum(ifelse(compliance == 0, 1, 0)),
            num_compliant = sum(ifelse(compliance == 1, 1, 0)))


```

```{r}
# Join the two datasets by spatial intersection
pb_bosques_compliance <- st_join(political_boundaries, auth_year_bosques_geom, join = st_intersects)

# Calculate the average compliance by district and determine how many put_id per district
compliance_by_dist <- pb_bosques_compliance %>%
  group_by(nom_dist) %>%
  summarize(avg_compliance = mean(compliance) * 100, 
            num_put_id = n_distinct(put_id),
            num_non_compliant = sum(ifelse(compliance == 0, 1, 0)),
            num_compliant = sum(ifelse(compliance == 1, 1, 0)))

# Calculate the average compliance by department and determine how many put_id per department
pb_bosques_compliance2 <- pb_bosques_compliance[!is.na(pb_bosques_compliance$compliance), ]


compliance_by_dpto <- pb_bosques_compliance2 %>%
  group_by(nom_dpto) %>%
  summarize(avg_compliance = mean(compliance) * 100, 
            num_put_id = n_distinct(put_id),
            num_non_compliant = sum(ifelse(compliance == 0, 1, 0)),
            num_compliant = sum(ifelse(compliance == 1, 1, 0)))
```

# VISULIZATIONS

## Plot average compliance by district

```{r}
#DO NOT USE
#HCL color palette
my_palette <- c("#8c510a", "#d8b365", "#f6e8c3", "#f5f5f5", "#c7eae5", "#5ab4ac", "#01665e")

ggplot() +
  geom_sf(data = compliance_by_dist, aes(fill = avg_compliance)) +
  scale_fill_gradientn(colors = my_palette, na.value = "grey", 
                       name = "Average Compliance (%)",
                       breaks = seq(0, 100, by = 5),
                       labels = paste0(seq(0, 100, by = 5), "%"),
                       guide = guide_colorbar(na.label = "Missing")) +
  labs(title = "Choropleth Map of Compliance by District") +
  theme_void()


p <- ggplot() +
  geom_sf(data = compliance_by_dist, aes(fill = avg_compliance*100)) +
  scale_fill_gradientn(colors = my_palette, na.value = "grey", 
                       name = "Average Compliance (%)",
                       breaks = seq(0, 100, by = 5),
                       labels = paste0(seq(0, 100, by = 5), "%"),
                       guide = guide_colorbar(na.label = "Missing")) +
  labs(title = "Choropleth Map of Compliance by District") +
  theme_void()

ggplotly(p)

```

#leaflet choropleth

```{r}
# Transform the data to lat-long
compliance_by_dist <- st_transform(compliance_by_dist, crs = "+proj=longlat +datum=WGS84")
compliance_by_dpto <- st_transform(compliance_by_dpto, crs = "+proj=longlat +datum=WGS84")

# Define color palette
my_palette <- colorNumeric(palette = "YlGnBu", domain = compliance_by_dist$avg_compliance)
my_palette1 <- colorNumeric(palette = "YlOrRd", domain = compliance_by_dist$avg_compliance)
my_palette1 <- colorNumeric(palette = "YlOrRd", domain = compliance_by_dpto$avg_compliance)
#YlGnBu
library(htmltools)
# Create leaflet map
leaflet(data = compliance_by_dist) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette(avg_compliance),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", compliance_by_dist$nom_dist,
                             " Compliance: ", round(compliance_by_dist$avg_compliance), "%",
                             " Number of properties: ", compliance_by_dist$num_put_id,
                             " Number of non-compliant properties: ", compliance_by_dist$num_non_compliant,
                             " Number of compliant properties: ", compliance_by_dist$num_compliant)) %>%
  addLegend(pal = my_palette, values = compliance_by_dist$avg_compliance,
            title = "Average Compliance (%)",
            position = "bottomright")


#dpto
leaflet(data = compliance_by_dpto) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~my_palette1(avg_compliance),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              opacity = 1,
              highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
              label = paste0("District: ", compliance_by_dpto$nom_dpto, "<br>",
                             " Compliance: ", round(compliance_by_dpto$avg_compliance), "%",
                             " Number of properties: ", compliance_by_dpto$num_put_id,
                             " Number of non-compliant properties: ", compliance_by_dpto$num_non_compliant,
                             " Number of compliant properties: ", compliance_by_dpto$num_compliant)) %>%
  addLegend(pal = my_palette1, values = compliance_by_dpto$avg_compliance,
            title = "Average Compliance (%)",
            position = "bottomright")

```

#Average Compliance percent by district plots

```{r}
ggplot(compliance_by_dist, aes(x = avg_compliance, y = nom_dist)) +
  geom_bar(stat = "identity", fill = "#5ab4ac") +
  ggtitle("Compliance Percentage by District") +
  xlab("Average Compliance Percentage") +
  ylab("District")


compliance_by_dist_ordered <- compliance_by_dist %>%
  filter(!is.na(avg_compliance)) %>%
  mutate(nom_dist = fct_reorder(nom_dist, avg_compliance)) 

#dpto
compliance_by_dpto_ordered <- compliance_by_dpto %>%
  filter(!is.na(avg_compliance)) %>%
  mutate(nom_dpto = fct_reorder(nom_dpto, avg_compliance)) 

ggplot(data = compliance_by_dist_ordered, aes(x = avg_compliance, y = nom_dist)) +
  geom_bar(stat = "identity", fill = "#5ab4ac") +
  geom_text(aes(label = paste(round(avg_compliance), "%")), hjust = -0.1, size = 3) +
  labs(title = "Compliance Percentage by District", x = "Compliance (%)", y = "District") +
  theme_minimal()

#dpto
ggplot(data = compliance_by_dpto_ordered, aes(x = avg_compliance, y = nom_dpto)) +
  geom_bar(stat = "identity", fill = "#5ab4ac") +
  geom_text(aes(label = paste(round(avg_compliance), "%")), hjust = -0.1, size = 3) +
  labs(title = "Compliance Percentage by Department", x = "Compliance (%)", y = "Department") +
  theme_minimal()

#lollipop
ggplot(compliance_by_dist_ordered, aes(x = avg_compliance, y = nom_dist)) +
  geom_segment(aes(xend = 0, yend = nom_dist), color = "grey50") +
  geom_point(size = 3, color = "#5ab4ac") +
  geom_text(aes(x = avg_compliance + 1, label = paste0(round(avg_compliance), "%")), 
            size = 3, hjust = 0, vjust = 0.5) +
  ggtitle("Compliance Percentage by District") +
  xlab("Average Compliance Percentage") +
  ylab("District") +
  theme_classic()
```

```{r}
# Create a horizontal bar chart
ggplot(compliance_by_dist, aes(x = avg_compliance, y = reorder(nom_dist, num_put_id), fill = avg_compliance)) +
  geom_bar(stat = "identity") +
  scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd")) +
  geom_text(aes(label = paste("Property Count:", num_put_id)), hjust = -0.1, size = 3) +
  ggtitle("Average Compliance and Property Count by District") +
  xlab("Average Compliance Percentage") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  labs(fill = "Average Compliance Percentage")
```

```{r}
#interactive
library(plotly)

p1 <- ggplot(compliance_by_dist, aes(x = avg_compliance, y = nom_dist, fill = avg_compliance)) +
  geom_bar(stat = "identity") +
  scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd")) +
  ggtitle("Average Compliance and Property Count by District") +
  xlab("Average Compliance Percentage") +
  ylab("District") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "right") +
  labs(fill = "Average Compliance Percentage")

# Create interactive plotly object

ggplotly(p1, tooltip = c("x")) %>%
  style(hoverlabel = list(bgcolor = "white"))
```

#visualization practice

```{r}
# Create choropleth map
ggplot() +
  geom_sf(data = auth_year_bosques_geom,
          aes(fill = compliance)) +
  scale_fill_gradient(name = "Compliance",
                      colors = brewer.pal(9, "YlOrRd")) +
  theme_void()


library(ggplot2)
library(ggiraph)
library(ggiraphExtra)

# Create choropleth map
p <- ggplot() +
  geom_sf(data = auth_year_bosques_geom, 
                      aes(fill = compliance)) +
  scale_fill_gradient(name = "Compliance", low = "#DDCC77", high = "#117733") +
  theme_void() +
  theme(panel.background = element_rect(fill = "transparent", color = NA))

x <- girafe(ggobj = p)
x <- girafe_options(x,
  opts_zoom(min = .7, max = 10) )
if( interactive() ) 
  print(x)

```

```{r}
# Create choropleth map
p <- ggplot() +
  geom_sf(data = auth_year_group2_filter, 
                      aes(fill = compliance, tooltip = paste0("Compliance: ", compliance))) +
  scale_fill_gradient(name = "Compliance", low = "#DDCC77", high = "#117733") +
  theme_void() 

x <- girafe(ggobj = p)
x <- girafe_options(x,
  opts_zoom(min = .7, max = 2) )
if( interactive() ) print(x)
```

```{r}
# Create choropleth map
p <- ggplot() +
  geom_sf(data = auth_year_group2_filter, 
          aes(fill = compliance), show.legend = FALSE) +
  geom_sf(data = auth_year_group2_filter, 
          fill = NA, color = "white", size = 0.1) +
  scale_fill_gradient(name = "Compliance", low = "#DDCC77", high = "#117733") +
  theme_void() +
  theme(panel.background = element_rect(fill = "transparent", color = NA))

x <- girafe(ggobj = p)
x <- girafe_options(x,
                    opts_zoom(min = .7, max = 2) )
if( interactive() ) 
  print(x)

```
