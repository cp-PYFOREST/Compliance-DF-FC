---
title: "Objective 1 Progress"
format: html
editor: visual
---

```{r}
# Load packages ---------------------------------------------------------
library(sf)
library(tidyverse)
library(terra) 
library(tmap)
library(leaflet)
library(ggplot2)
library(exactextractr)
library(units)
```

### Data

```{r}
# Data directory ---------------------------------------------------------
datadir <- path.expand("~/../../capstone/pyforest/data")
```

```{r}
# Forest loss --------------------------------------------------------
fl_00_05 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20002005.tif"))
fl_00_05
```

```{r}
# fl_05_11 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20052011.tif"))
# 
# fl_11_13 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20112013.tif"))
# 
# fl_13_15 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20132015.tif"))
# 
# fl_15_17 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20152017.tif"))
# 
# fl_17_18 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20172018.tif"))
# 
# fl_18_19 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20182019.tif"))
# 
# fl_19_20 <- terra::rast(file.path(datadir, "forest_loss/forest_loss_infona/fl/fl20192020.tif"))
```

```{r}
# Source  in  function for active lup_period
#
#  ---------------------------------
source("lup_data.R")


```



```{r}
# Read in LUP data 
datadir <- path.expand("~/../../capstone/pyforest/data")
lup <- readRDS(file.path(datadir, "active_inactive/active_inactive.rds"))
#unique(lup$cod_dpto) #(P,Q,R departments of Chaco)
```


```{r}
# Apply function to get active LUP for year ranges 
lup_2000_2005 <- lup_period(2000, 2005, lup)
# lup_2005_2011 <- lup_period(2005, 2011, lup)
# lup_2011_2013 <- lup_period(2011, 2013, lup)
# lup_2013_2015 <- lup_period(2013, 2016, lup)
# lup_2015_2017 <- lup_period(2015, 2017, lup)
# lup_2017_2018 <- lup_period(2017, 2018, lup)
# lup_2018_2019 <- lup_period(2018, 2019, lup)
# lup_2019_2020 <- lup_period(2019, 2020, lup)
```

```{r}
# LUP w/forest reserve/hedgerows/paddocks polygons ----------------------------------
# data is still not cleaned up with matching put_id (*v_2)
# lup_w_categories <- sf::st_read(file.path(datadir, "permited_land_use/catastro_forestal.shp"))
lup_w_categories <- st_read(file.path(datadir, "permited_land_use/in_progress_v2_permited_lup_data/uso_alternativo_v2.gpkg"))
```

# Check CRS

```{r}
crs(fl_00_05)

```

```{r}
crs(lup_w_categories)
```

```{r}
# reproject to crs EPSG32721

lup_w_categories_proj <- st_transform(lup_w_categories, crs(fl_00_05))
crs(lup_w_categories_proj)
```

```{r}
# Total area chaco
chaco <- sf::st_read(file.path(datadir, "study_boundary/study_boundary.shp"))

crs(chaco)

```

```{r}
# chaco_area <- st_area(chaco) # 240882905151 m^2
# chaco_ha <- chaco_area/10000 #  24088291 hectares
# chaco_ha <- as.numeric(gsub("[^0-9.]+", "", chaco_ha)) # 24088291 drops units 


# library(units)
chaco_area <- st_area(chaco) |> drop_units() # 240882905151 m^2
chaco_ha <- chaco_area/10000


```

# 2000 - 2005

### Total FL

```{r}
# Total number of deforestation cells for fl 2000 - 2005 raster 
dim <- dim(fl_00_05) # number of rows (dim[1]) and the number of columns (dim[2])
tot_cell <- dim[1] * dim[2] # total number of cells in the raster dataset
total_loss <- sum(fl_00_05[] == 1, na.rm = TRUE) # 8559598 CELLS WITH VALUE OF 1(30 X30 PIXEL)
```

```{r}
total_cell <- terra::global(fl_00_05, fun = "sum", na.rm = TRUE)
total_cell # 8559598
total_cell  * (30^2) #7703638200
(total_cell  * (30^2)) / 10000 # 770363.8
```





```{r}
# Calculate area of forest loss from raster cells  
fl_00_05_sq_m <- total_loss * (30^2)
fl_00_05_ha <- fl_00_05_sq_m / 10000
fl_00_05_ha #8559598 * 900 = 7703638200 m^2 = 770,363.8 hectares

# Percent of forest loss of the Paraguayan Chaco 
p_00_05_chaco_ha <- round((fl_00_05_ha / chaco_ha) * 100, 2)

print(paste0("Between 2000 - 2005 ", fl_00_05_ha, " hectares of forest was lost that is ", p_00_05_chaco_ha, " percent of the paraguayan chaco."))
```

```{r}
cellSize(fl_00_05, unit = 'm')

```


```{r}
# But note that for both angular (longitude/latitude) and for planar (projected) coordinate reference systems raster cells sizes are generally not constant, unless you are using an equal-area coordinate reference system.
# 
# For planar CRSs, the area is therefore not computed based on the linear units of the coordinate reference system, but on the *actual* area by transforming cells to longitude/latitude. If you do not want that correction, you can use transform=FALSE or init(x, prod(res(x)))
# 
cellSize(fl_00_05, unit = 'm', transform = FALSE)
```
```{r}
8559598 * 758.9813 / 10000

8559598 * 764.5599 / 10000

8559598 * 763.957 / 10000

```


### Subsets of LUP

```{r}
# Data 
# fl_00_05
#lup_2000_2005

# Filter the permitted_lup data with the active properties for the year range
lup_active_00_05 <- lup_w_categories_proj %>% 
  filter(put_id %in% lup_2000_2005$put_id)
```

```{r}
# Now lets make subsets for each category of Bosques Proteccion (Protected forest), Reservera legal (forest reserve, hedgerows, buffers), Area authroizada (authorized fl )
  #unique(lup_active_00_05$categoria)
  #unique(lup_active_00_05$grupo)

# SUBSET LUP DATA BASED ON GROUPS ----------------------------------------------

  # 1. Paddocks (deforestation allowed) 
lup_paddocks_00_05 <- lup_active_00_05 %>% filter(grupo == "AREA_AUTORIZADA")  %>% st_sf()


  # 2. Forest Reserve (forest area) 
lup_forestreserve_00_05 <- lup_active_00_05 %>% filter(grupo == "RESERVA_LEGAL")  %>% st_sf()

  # 3. Protected Forest hedgerow/riparian
lup_protect_forest_00_05 <- lup_active_00_05 %>% filter(grupo == "BOSQUES_PROTECCION") %>% st_sf()

  #. 4. Others (grasslands, many categories deforestation ilegal/legal(?)) need clarificaiton
lup_other_00_05 <- lup_active_00_05 %>% filter(grupo == "OTROS") %>% st_sf()
#lup_other_00_05 # DOUBLE CHECK ..... going with illegal

  # 5. NA 
# lup_na_00_05 <- lup_active_00_05 %>% filter(grupo == "NA") %>% st_sf()

```

### Authorized

```{r}
# Check ext of raster and polygons 
ext(fl_00_05)
ext(lup_paddocks_00_05)
st_bbox(lup_paddocks_00_05) # since it's an sf object let's make sure
```

## FOLLOW THE FOLLOWING STEPS IF EXTENTS DON'T MATCH IN THIS CASE THEY MATCH

```{r}
## They don't match, and since extract does the same thing it is correct that it is
## not completely necessary. The mask will remove values outside of the region of interest, any values outside of the mask are convereted to NA. We then crop the raster to the 
## region of interest. 

# Set the extent of the raster to match the shapefile extent
ext(fl_00_05) <- ext(lup_paddocks_00_05) # now they match extents
#
```


```{r}
# # Crop the raster to the extent of the shapefile
fl_00_05_crop <- crop(fl_00_05, lup_paddocks_00_05)
#
# # Mask the raster with the shapefile
fl_00_05_mask <- mask(fl_00_05_crop, lup_paddocks_00_05)
```



```{r}
fl_00_05_mask2 <- mask(fl_00_05, lup_paddocks_00_05)
fl_00_05_crop2 <- crop(fl_00_05_mask2, lup_paddocks_00_05)

```


auth_00_05 <- terra::extract(fl_00_05_mask, lup_paddocks_00_05,fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)

auth_fl <- auth_00_05 %>% 
  mutate(auth_area_m_2 = auth_00_05$periodo_ca * (30)^2) %>% 
  mutate(auth_area_ha = (auth_00_05$periodo_ca * (30)^2) / 10000) 


tot_auth_fl_ha <- sum(auth_fl$auth_area_ha)

# Check tot area and compare to the total fl of 2000 - 2005 should be less
fl_00_05_ha
tot_auth_fl_ha
auth_00_05

plot(auth_00_05)


```{r}
tmap_mode('plot')
tm_shape(fl_00_05_crop2) +
  tm_raster()
```


# GUILLERMO

touches	
logical. If TRUE, values for all cells touched by lines or polygons are extracted, not just those on the line render path, or whose center point is within the polygon. Not relevant for points; and always considered TRUE when weights=TRUE or exact=TRUE


```{r}
auth_00_05_mask <- terra::extract(fl_00_05_mask, lup_paddocks_00_05, fun=sum, na.rm=TRUE, ID=TRUE, touches = TRUE, bind = TRUE)
auth_00_05_bind
```
```{r}
auth_00_05_crop <- terra::extract(fl_00_05_crop2, lup_paddocks_00_05, fun=sum, na.rm=TRUE, ID=TRUE, touches = TRUE, bind = TRUE)
auth_00_05_bind

```



```{r}
auth_00_05_bind <- terra::extract(fl_00_05, lup_paddocks_00_05, fun=sum, na.rm=TRUE, ID=TRUE, touches = TRUE, bind = TRUE)
auth_00_05_bind
```


```{r}

auth_00_05_ee <- as.data.frame(terra::extract(fl_00_05, lup_paddocks_00_05, fun=sum, na.rm=TRUE, ID=TRUE, bind = TRUE))


```

```{r}
# Assuming lup_paddocks_00_05 is a SpatVector object
lup_paddocks_df <- as.data.frame(auth_00_05_bind) |>
  mutate(auth_area_m_2 = auth_00_05_bind$periodo_ca * (30) ^ 2) %>%
  mutate(auth_area_ha = (auth_00_05_bind$periodo_ca * (30) ^ 2) / 10000) |>
  select(put_id, periodo_ca, auth_area_m_2, auth_area_ha)


lup_paddocks_df_mask <- as.data.frame(auth_00_05_mask) |>
  mutate(auth_area_m_2 = auth_00_05_bind$periodo_ca * (30) ^ 2) %>%
  mutate(auth_area_ha = (auth_00_05_bind$periodo_ca * (30) ^ 2) / 10000) |>
  select(put_id, periodo_ca, auth_area_m_2, auth_area_ha)




lup_paddocks_df_crop <- as.data.frame(auth_00_05_crop) |>
  mutate(auth_area_m_2 = auth_00_05_bind$periodo_ca * (30) ^ 2) %>%
  mutate(auth_area_ha = (auth_00_05_bind$periodo_ca * (30) ^ 2) / 10000) |>
  select(put_id, periodo_ca, auth_area_m_2, auth_area_ha)
```


```{r}
# View the resulting data frame
head(lup_paddocks_df)
head(lup_paddocks_df_mask)
head(lup_paddocks_df_crop)
```


```{r}
sum(lup_paddocks_df$auth_area_ha)
sum(lup_paddocks_df_crop$auth_area_ha)
sum(lup_paddocks_df_mask$auth_area_ha)


```

```{r}
plot(auth_00_05_bind)
plot(auth_00_05_mask)
plot(auth_00_05_crop)

```

```{r}
fl_lup_df <- lup_paddocks_df |> 
  group_by(put_id) |> 
  summarize(fl_authorized = sum(auth_area_ha))
fl_lup_df
```


# ZONAL
```{r}
fl_00_05_terra <- fl_00_05
lup_paddocks_00_05_terra <- vect(lup_paddocks_00_05)
auth_00_05_terra <- zonal(fl_00_05_terra, lup_paddocks_00_05_terra, fun = "sum", na.rm = TRUE, touches = TRUE, as.polygons = TRUE)

auth_00_05_terra
auth_00_05_terra$auth_area_m_2 <- auth_00_05_terra$sum * (30^2)
auth_00_05_terra$auth_area_ha <- auth_00_05_terra$auth_area_m_2 / 10000
tot_auth_fl_ha_terra <- sum(auth_00_05_terra$auth_area_ha, na.rm = TRUE)

tot_auth_fl_ha_terra
print(auth_00_05_terra)
```
# EXACT_EXTRACT
```{r}
auth_stats <- exact_extract(fl_00_05, lup_paddocks_00_05, 
                            fun = 'count', force_df = TRUE)

auth_stats
```


```{r}
auth_stats$auth_area_m_2 <- auth_stats$sum * (30^2)
auth_stats$auth_area_ha <- auth_stats$auth_area_m_2 / 10000
tot_auth_fl_ha_exactextractr <- sum(auth_stats$auth_area_ha, na.rm = TRUE)

auth_stats
tot_auth_fl_ha_exactextractr
```

### Unauthorized in LUP

```{r}

## FOREST RESERVE -------------------------------------------------------------
# lup_forestreserve_00_05

unauth_fr_00_05 <- extract(fl_00_05, lup_forestreserve_00_05, fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)

unauth_fr <- unauth_fr_00_05 %>% 
  mutate(unauth_area_m_2 = unauth_fr_00_05$periodo_ca * (30)^2) %>% 
  mutate(unauth_area_ha = (unauth_fr_00_05$periodo_ca * (30)^2) / 10000)


tot_unauth_fr_ha <- sum(unauth_fr$unauth_area_ha)
tot_unauth_fr_ha
```

```{r}
## Hedgerow/Riparian Forest (hrf) ---------------------------------------------------
# lup_protect_forest_00_05
unauth_hrf_00_05 <- extract(fl_00_05, lup_protect_forest_00_05, fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)

unauth_hrf <- unauth_hrf_00_05 %>% 
  mutate(unauth_area_m_2 = unauth_hrf_00_05$periodo_ca * (30)^2) %>% 
  mutate(unauth_area_ha = (unauth_hrf_00_05$periodo_ca * (30)^2) / 10000)


tot_unauth_hrf_ha <- sum(unauth_hrf$unauth_area_ha)
tot_unauth_hrf_ha
```

```{r}
#lup_other_00_05
fl_other <- extract(fl_00_05, lup_other_00_05, fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)

other_fl <- fl_other %>% 
  mutate(unauth_area_m_2 = fl_other$periodo_ca * (30)^2) %>% 
  mutate(unauth_area_ha = (fl_other$periodo_ca * (30)^2) / 10000)


tot_unauth_other_ha <- sum(other_fl$unauth_area_ha)
tot_unauth_other_ha
```

#### Unauthorized outside LUP

```{r}
# Get the number of cells outside of the properties with a value of 1
fl_in_lup <- extract(fl_00_05, lup_2000_2005, fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)

total_loss <- sum(!is.na(fl_00_05[])) # totals up all cells that are 1
total_inside_loss <- sum(fl_in_lup$periodo_ca)
outside_loss <- total_loss - total_inside_loss # subtracts cells
outside_loss

tot_unauth_outside_fl_ha = (outside_loss * (30)^2) / 10000
```

#### Checks

###### Maps 2000 - 2005

```{r}
# Resampled to lower resoultion 
# *** Note resoultion is not accurate of data ***
tmap_mode("view")
fl_down_00_05 <- aggregate(fl_00_05, fact=5)
#lup_2000_2005
#lup_active_00_05
#lup_paddocks_00_05
#lup_forestreserve_00_05
#lup_protect_forest_00_05
#lup_other_00_05
# view 
tm_shape(fl_down_00_05) + tm_raster(palette = "Reds") + 
  tm_shape(lup_2000_2005) + tm_fill(col = "lightblue") +
  tm_shape(lup_active_00_05) + tm_polygons(col = "cyan3") +
  tm_shape(lup_paddocks_00_05) + tm_fill(col = "dodgerblue") +
  tm_shape(lup_forestreserve_00_05) + tm_fill(col = "red") + 
  tm_shape(lup_forestreserve_00_05) + tm_fill(col = "darkgreen") +
  tm_shape(lup_other_00_05) + tm_fill(col = "yellow")
```

###### Sums check

```{r}
# check that the authorized and non authorized equal the total loss 
    # tot_auth_fl_ha
    # tot_unauth_fr_ha
    # tot_unauth_hrf_ha
    # tot_unauth_other_ha
    # unauth_fl_ha
    # fl_00_05_ha

unauth <- tot_unauth_fr_ha + tot_unauth_hrf_ha + tot_unauth_other_ha + tot_unauth_outside_fl_ha
auth <- tot_auth_fl_ha

# Check whether the sum of unauth_fl_ha and tot_auth_fl_ha equals fl_00_05_ha
sum_fl_ha <- unauth + auth
if (sum_fl_ha == fl_00_05_ha) {
  print("The sum of unauth_fl_ha and tot_auth_fl_ha equals fl_00_05_ha.")
} else if (sum_fl_ha > fl_00_05_ha) {
  diff_fl_ha <- round(sum_fl_ha - fl_00_05_ha, 2)
  print(paste("The sum of unauth_fl_ha and tot_auth_fl_ha is", diff_fl_ha, "hectares larger than fl_00_05_ha."))
} else {
  diff_fl_ha <- round(fl_00_05_ha - sum_fl_ha,2)
  print(paste("The sum of unauth_fl_ha and tot_auth_fl_ha is", diff_fl_ha, "hectares smaller than fl_00_05_ha."))
}

```

##### Stats DF

```{r}
# Forest left after fl of 00 - 05 
forest_left <- chaco_ha - total_loss




# 2000 - 2005 Stats 
df_00_05 <- data.frame(Chaco = c("Total Area", "Forest Loss Area", "Percent Forest Loss",
                                 "Paddocks FL", "Forest Reserve FL", "Hedgerow, Riparian FL", "Other FL",
                                 "No LUP FL", "Forest Left", "Total Authorized FL", "Total Unauthorized FL"),
                   Value = c(chaco_ha, fl_00_05_ha, p_00_05_chaco_ha, 
                             tot_auth_fl_ha, tot_unauth_fr_ha, tot_unauth_hrf_ha, tot_unauth_other_ha,
                             tot_unauth_outside_fl_ha, forest_left, auth, unauth),
                   Unit = "ha")
```

## SCRATCH CODE

Authorized FL

```{r}
# Check ext of raster and polygons 
ext(fl_00_05)
ext(lup_2000_2005_sf)

# Set the resolution of the raster to match the shapefile extent 
ext(fl_00_05) <- ext(lup_2000_2005_sf) # now they match extents 

# Crop the raster to the extent of the shapefile
fl_00_05_crop <- crop(fl_00_05, lup_2000_2005_sf)

# Mask the raster with the shapefile
fl_00_05_mask <- mask(fl_00_05_crop, lup_2000_2005_sf)


# Extract the cell values of the masked raster for each property
prop_data <- extract(r_mask, s, fun=sum, na.rm=TRUE, df = TRUE, ID=TRUE)


## NEED TO FIGURE OUR IF GOAL IS TO SHOW DF ASSOCIATED TO LUP##***********

# Data frame w/authorized df for each property **we can drop put_id also**
# id <- st_drop_geometry(lup_2000_2005)$put_id
# a_fl_lup_id <- left_join(prop_data, lup_2000_2005, by = c("ID"="id"))
# NOTE :: id's don't match so this is incorrect *****
  
```

```{r}
# Caclulate auth. fl 
auth_fl <- prop_data %>% 
  mutate(auth_area_m_2 = prop_data$periodo_ca * (30)^2) %>% 
  mutate(auth_area_ha = (prop_data$periodo_ca * (30)^2) / 10000)


tot_auth_fl_ha <- sum(auth_fl$auth_area_ha)

# Check tot area and compare to the total fl of 2000 - 2005 should be less
fl_00_05_ha
tot_auth_fl_ha

```

Unauthorized FL

```{r}
# Get the number of cells outside of the properties with a value of 1

total_loss <- sum(!is.na(r[])) # totals up all cells that are 1 
outside_loss <- total_loss - sum(prop_data) # subtracts cells 
outside_loss

unauth_fl_ha = (outside_loss * (30)^2) / 10000
```

```{r}
# check that the authorized and non authorized equal the total loss 
# unauth_fl_ha Authorized
# tot_auth_fl_ha Not authorized
# fl_00_05_ha Total FL based on raster


# Check whether the sum of unauth_fl_ha and tot_auth_fl_ha equals fl_00_05_ha
sum_fl_ha <- unauth_fl_ha + tot_auth_fl_ha
if (sum_fl_ha == fl_00_05_ha) {
  print("The sum of unauth_fl_ha and tot_auth_fl_ha equals fl_00_05_ha.")
} else if (sum_fl_ha > fl_00_05_ha) {
  diff_fl_ha <- round(sum_fl_ha - fl_00_05_ha, 2)
  print(paste("The sum of unauth_fl_ha and tot_auth_fl_ha is", diff_fl_ha, "hectares larger than fl_00_05_ha."))
} else {
  diff_fl_ha <- round(fl_00_05_ha - sum_fl_ha,2)
  print(paste("The sum of unauth_fl_ha and tot_auth_fl_ha is", diff_fl_ha, "hectares smaller than fl_00_05_ha."))
}


```
