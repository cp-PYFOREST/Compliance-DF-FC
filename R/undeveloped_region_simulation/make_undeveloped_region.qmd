---
editor: 
  markdown: 
    wrap: 72
---
 
```{r}
library(sf)
library(tmap)
library(tidyverse)
library(here)
library(knitr)
library(mapview)
```
 
 
```{r}

#ource(knitr::purl(here("R",'src', "collect_stats.qmd")))
#source(knitr::purl(here("R",'src', "boundary_registry_data.qmd")))
```
 
 
```{r}

undeveloped_region <- st_read('/capstone/pyforest/data/undeveloped_region/expansion3.shp')

st_crs(undeveloped_region) <- "+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"


dist_filadelphia <- st_read('/capstone/pyforest/data/dist_filadelphia/dist_filadelphia.shp')

hydro <- st_read(here('/capstone/pyforest/data/roads_hydrology/ly_hid2.shp'))  
st_crs(hydro) <- "+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"

```

```{r}

tmap_mode('view')
tmap_options(check.and.fix = TRUE)
tm_shape(undeveloped_region) +
  tm_fill(col = 'red')
plot(undeveloped_region)

```
 
 
```{r}

limit_lu <- st_intersection(dist_filadelphia, undeveloped_region ) |> 
  st_union( is_coverage = TRUE) |>
  st_as_sf() 


tm_shape(limit_lu) +
  tm_sf(col = 'red')

```

```{r}
st_crs(active_inactive) <- "+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"

```


```{r}

avg_property <- active_inactive |>
  mutate(property_area = st_area(active_inactive), .before = geometry) |>
  drop_units() |>
  st_drop_geometry() |>
  summarize(mean = mean(property_area)) |> 
  as.integer()

```
 
 
```{r}
dimensions <- property_dimensions(desired_area = avg_property) 
```
 
```{r}
undeveloped_gridded <- grid_rotate(boundary_property = undeveloped_region, x_y = dimensions) |> st_as_sf()


plot(undeveloped_gridded)
tmap_mode('view')
tmap_options(check.and.fix = TRUE)
tm_shape(undeveloped_gridded) +
  tm_sf()

average_properties <- undeveloped_gridded |> 
  mutate(cat = seq(1:5800), 
         area = st_area(undeveloped_gridded), .before = x) |>
  drop_units() 

plot(average_properties['area'])
hist(average_properties$area)
tm_shape(average_properties) +
  tm_sf()
```
 
 

 

 
 
```{r}
tm_shape(limit_lu) +
  tm_borders(col = 'red')
```
 
 
```{r}
# system.time({
#   source(knitr::purl(here("R",'src', "forest_cover_vars.qmd")))
# }) 

#districts <- st_read('/capstone/pyforest/data/Political_Boundaries/distritos.shp') |>
#  st_make_valid()

#departments <- st_read('/capstone/pyforest/data/Political_Boundaries/departamento.shp') |>
#  st_make_valid()

#wildlife_protected <- st_read('/capstone/pyforest/data/Wildlife_Protection_Areas/ASP_ROCC.shp')

#certificadas <- st_read('/capstone/pyforest/data/Certificadas/certificadas.shp')

#indigenous_land <- st_read('/capstone/pyforest/data/Indigenous_Land/native_land.shp')

```
 


```{r}
#https://gis.stackexchange.com/questions/375345/dividing-polygon-into-parts-which-have-equal-area-using-r



# library(mapview)
# library(dismo)
# library(osmdata)  
# library(mapview)
# split_poly <- function(sf_poly, n_areas){
# # create random points
# points_rnd <- st_sample(sf_poly, size = 10000)
# #k-means clustering
# points <- do.call(rbind, st_geometry(points_rnd)) %>%
#   as_tibble() %>% setNames(c("lon","lat"))
# k_means <- kmeans(points, centers = n_areas)
# # create voronoi polygons
# voronoi_polys <- dismo::voronoi(k_means$centers, ext = sf_poly)
# # clip to sf_poly
# crs(voronoi_polys) <- crs(sf_poly)
# voronoi_sf <- st_as_sf(voronoi_polys)
# equal_areas <- st_intersection(voronoi_sf, sf_poly)
# equal_areas$area <- st_area(equal_areas)
# return(equal_areas)
# }
```

```{r}
# This is a script that approximates the fractions, it has a great field for optimization. It only does horizontal cutting, not in an oriented bounding box. In the porcientos argument you may put as many values as you like, it is not only for halves (c(.5,.5), this means c(.4, .3, .2, .1) would be a valid vector as well.

# library(units)
# library(sf)
# library(dplyr)
# library(osmdata)
# 
# pol <- osmdata::getbb("aguascalientes", format_out = "sf_polygon") 
# porcientos <- c(.5,.5) # the half argument
# 
# polycent <- function(poly, porcientos) {
#   df   <- st_sf(id = 1:length(porcientos), crs = 4326, # empty sf for populating
#                 geometry = st_sfc(lapply(1:length(porcientos), function(x) st_multipolygon())))
#   area1 <- st_area(poly) %>% sum() # st_area takes multipolygons as one; # area1 is constant
#   poly2 <- poly # duplicating for the final cut
#   for(j in  seq_along(porcientos[-length(porcientos)])) { 
#     bb = st_bbox(poly2)
#     top <- bb['ymax']
#     bot <- bb['ymin']
#     steps <- seq(bot, top, by = (top - bot) / 80)
#     for(i in steps[2:length(steps)]) {  # 2:n because 1:n renders a line "ymax" = "ymin"
#       bf <- bb
#       bf['ymax'] = i
#       temp <- st_intersection(poly, st_as_sfc(bf, 4326))
#       area2 <- st_area(temp) %>% sum()           # con get(.., i) coz st_area prints rounded
#       if(drop_units(area2)/drop_units(area1) >= porcientos[j]) break
#       df$geometry[j] <- st_geometry(temp)
#     }
#     poly2 <- st_difference(poly2, st_union(df))
#   }
#   df$geometry[length(porcientos)] <- st_geometry(st_difference(poly, st_union(df)))
#   poly <- df
# }
```

# Test for undeveloped region polygons with st_make_grid

```{r}

# Create a dataset of sfc cells using st_make_grid
#bbox <- st_bbox(c(0, 0, 10, 10))
#grid_size <- c(2, 2)
#grid <- st_make_grid(bbox, cellsize = c(diff(bbox[c(1, 3)]) / grid_size[1],
#                                         diff(bbox[c(2, 4)]) / grid_size[2]))

```

# Source Functions



Variables to call with: property_select(): property_cat

property_dimension(): paddock_area = 999000, hedgerow_width = 50,
width_paddock = 1, height_paddock = 1, tol = 0.01, new_dim = NULL,
max_iter = 100

