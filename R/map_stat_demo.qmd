# Libraries

```{r}
#| include: false
library(sf)
library(tmap)
library(tidyverse)
library(here)
library(units)
library(knitr)
```

# Source Functions

```{r}
#| include: false
source(knitr::purl(here("R", "separate_functions.qmd")))
```

# Input Data

```{r}
#| include: false

limit_lu <- st_read(here('sample', 'limite_put_3ej.shp'))  |>  
  st_make_valid()|> 
  st_transform("EPSG:32721")

riverline <- st_read(here('sample', 'river_05242.shp')) |>
  st_make_valid() |>
  st_transform("EPSG:32721")

hydro <- st_read(here('hydro', 'ly_hid2.shp'))  |>
  st_make_valid() |>
  st_transform("EPSG:32721")


prop_limit <- st_read(here('sample', 'catastro_forestal_3ej.shp')) %>% 
  st_make_valid() |> 
  st_transform("EPSG:32721")
prop_limit_05242 <- prop_limit %>% 
  filter(cat == "05242")
```

# Select Property

```{r}

property_boundary <- select_property(5242)
```

# Riparian Corridor check

```{r}
# |include: false
riparian_corridor <- riparian_buffer()
```



# Input of Paddock and Hedgerow Dimensions

```{r}
# Need to figure out what to do here
# property_dimensions(paddock_area = 1222580.005 ,
#                                 hedgerow_width = 100,
#                                 width_paddock = 3,
#                                 height_paddock = 1)
# Units: [m^2]
#  [1] 1097438.2 1097422.4 1004152.8 1004166.2
#  [5] 1004126.0 1004166.2 1004099.1 1004166.2
#  [9] 1004072.3 1001580.3 1004045.4  992951.7
# [13] 1004018.6  984227.1 1003991.7  975502.4
# [17] 1003964.9  966777.7 1003938.0  958053.1
# [21] 1003911.2  949328.4 1048294.8  999929.7




pad_hedg_dim <- property_dimensions(
  paddock_area = 999000,
  hedgerow_width = 50,
  width_paddock = 3,
  height_paddock = 4,
  tol = 0.01,
  new_dim = NULL,
  max_iter = 500)
```

# Create Grid & Rotate

```{r}
property_grid <- grid_rotate()
```

```{r}
# cut grid with river
property_fragment <- riparian_cut()
```


# Create Forest Reserve â‰¥ 25% & \< 28%

```{r}
forest_reserve <- reserve()
```

# Property w/o reserve area

```{r}
property_remaining <- no_reserve_area()
```


# Hedgerows

```{r}
hedgerows <- make_hedges()

#Cut off buffer that extends over property boundary
hedge <- st_erase(hedgerows,property_boundary) 
hedges <- st_difference(hedgerows, hedge)


```


# Paddocks

```{r}
paddocks <- make_paddocks()
plot(paddocks, col = 'beige')
```



# If there is a corridor cut edges

```{r}
if(is.null(riparian_corridor) == FALSE) {
  riparian_area <- round(st_area(riparian_corridor),2)
  riparian_area_per <-
    (st_area(riparian_corridor) / st_area(property_boundary)) * 100
  final_hedgerow <- st_difference(hedges, riparian_corridor)
  
} else{
  riparian_area <- NA
  riparian_area_per <- NA
  final_hedgerow <- hedges
}


```


# Final Areas


```{r}
statistics <- tibble(
  id = property_boundary$cat,
  property_area = st_area(property_boundary) |> drop_units(),
  property_units = 'm^2',
  fr_area = st_area(forest_reserve) |> drop_units(),
  fr_units = 'm^2',
  fr_per = round((st_area(forest_reserve) / st_area(property_boundary)) * 100,2) |> drop_units()
,
  paddocks_area = round(sum(st_area(paddocks)) / st_area(property_boundary),2) |> drop_units(),
  paddocks_units = 'm^2',
  paddocks_per = round(sum(st_area(paddocks)) / st_area(property_boundary),2) |>  drop_units(),
  hedgerow_area = st_area(final_hedgerow) |>  drop_units(),
  hedgerow_units = 'm^2',
  hedgerow_per = round((sum(st_area(final_hedgerow)) / st_area(property_boundary)) * 100,2) |> drop_units(),
  riparian_area = riparian_area,
  riparian_units = 'm^2',
  riparian_per = riparian_area_per |> drop_units()
    )

saveRDS(statistics, "statistics.rds")
```




